// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBooks.Database;

#nullable disable

namespace eBooks.Database.Migrations
{
    [DbContext(typeof(EBooksContext))]
    [Migration("20251002165214_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eBooks.Database.Models.AccessRight", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("LastReadPage")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "BookId")
                        .HasName("PK__AccessRi__7456C06C617F4F44");

                    b.HasIndex("BookId");

                    b.ToTable("AccessRights");
                });

            modelBuilder.Entity("eBooks.Database.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthorId")
                        .HasName("PK__Authors__70DAFC345AD9B3BB");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "Name" }, "UQ__Authors__737584F632E31123")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("eBooks.Database.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("DeletionReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiscountEnd")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscountStart")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("draft");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookId")
                        .HasName("PK__Books__3DE0C2076FC51366");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("eBooks.Database.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BookId", "AuthorId")
                        .HasName("PK__BookAuth__6AED6DC4132FDB52");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("eBooks.Database.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BookId", "GenreId")
                        .HasName("PK__BookGenr__CDD892507C200D82");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("eBooks.Database.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__0385057EB27E9882");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "Name" }, "UQ__Genres__737584F6DA43679A")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("eBooks.Database.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B93855ABD7D24373");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "Name" }, "UQ__Language__737584F65EBDF0A8")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("eBooks.Database.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E12ED3BF5B1");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eBooks.Database.Models.PublisherFollow", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "PublisherId")
                        .HasName("PK__Publishe__B34E9BB6A477B14C");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherFollows");
                });

            modelBuilder.Entity("eBooks.Database.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FailureCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FailureMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__6B0A6BBEAEE16D8E");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("eBooks.Database.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("AnsweredById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06FAC2AED75BF");

                    b.HasIndex("AnsweredById");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("eBooks.Database.Models.ReadingProgress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("LastReadPage")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "BookId")
                        .HasName("PK__ReadingP__7456C06C16BB0080");

                    b.HasIndex("BookId");

                    b.ToTable("ReadingProgresses");
                });

            modelBuilder.Entity("eBooks.Database.Models.Report", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "BookId")
                        .HasName("PK__Reports__7456C06C41F69097");

                    b.HasIndex("BookId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("eBooks.Database.Models.Review", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReportReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportedById")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId")
                        .HasName("PK__Reviews__7456C06CA106DD71");

                    b.HasIndex("BookId");

                    b.HasIndex("ReportedById");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("eBooks.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1ADC6046CA");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eBooks.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("DeletionReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PublisherVerifiedById")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("StripeAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CD7A3B3FC");

                    b.HasIndex("PublisherVerifiedById");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534320D7866")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "UQ__Users__C9F28456E34C08FF")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eBooks.Database.Models.Wishlist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "BookId")
                        .HasName("PK__Wishlist__7456C06CEFFA3EC0");

                    b.HasIndex("BookId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("eBooks.Database.Models.AccessRight", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("AccessRights")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__AccessRig__BookI__6A30C649");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("AccessRights")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__AccessRig__UserI__693CA210");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Author", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "ModifiedBy")
                        .WithMany("Authors")
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK__Authors__Modifie__4316F928");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("eBooks.Database.Models.Book", b =>
                {
                    b.HasOne("eBooks.Database.Models.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK__Books__LanguageI__52593CB8");

                    b.HasOne("eBooks.Database.Models.User", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK__Books__Publisher__534D60F1");

                    b.HasOne("eBooks.Database.Models.User", "ReviewedBy")
                        .WithMany("BookReviewedBies")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK__Books__ReviewedB__5441852A");

                    b.Navigation("Language");

                    b.Navigation("Publisher");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("eBooks.Database.Models.BookAuthor", b =>
                {
                    b.HasOne("eBooks.Database.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__BookAutho__Autho__5DCAEF64");

                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookAutho__BookI__5CD6CB2B");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("eBooks.Database.Models.BookGenre", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookGenre__BookI__5812160E");

                    b.HasOne("eBooks.Database.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__BookGenre__Genre__59063A47");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("eBooks.Database.Models.Genre", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "ModifiedBy")
                        .WithMany("Genres")
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK__Genres__Modified__47DBAE45");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("eBooks.Database.Models.Language", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "ModifiedBy")
                        .WithMany("Languages")
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK__Languages__Modif__4CA06362");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("eBooks.Database.Models.Notification", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("Notifications")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Notificat__BookI__08B54D69");

                    b.HasOne("eBooks.Database.Models.User", "Publisher")
                        .WithMany("NotificationPublishers")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK__Notificat__Publi__09A971A2");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__0A9D95DB");

                    b.Navigation("Book");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.PublisherFollow", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "Publisher")
                        .WithMany("PublisherFollowPublishers")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK__Publisher__Publi__03F0984C");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("PublisherFollowUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Publisher__UserI__02FC7413");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Purchase", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("Purchases")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchases__BookI__7F2BE32F");

                    b.HasOne("eBooks.Database.Models.User", "Publisher")
                        .WithMany("PurchasePublishers")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchases__Publi__7E37BEF6");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("PurchaseUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchases__UserI__7D439ABD");

                    b.Navigation("Book");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Question", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "AnsweredBy")
                        .WithMany("QuestionAnsweredBies")
                        .HasForeignKey("AnsweredById")
                        .HasConstraintName("FK__Questions__Answe__0F624AF8");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("QuestionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Questions__UserI__0E6E26BF");

                    b.Navigation("AnsweredBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.ReadingProgress", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__ReadingPr__BookI__6EF57B66");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ReadingPr__UserI__6E01572D");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Report", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("Reports")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Reports__BookId__797309D9");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reports__UserId__787EE5A0");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Review", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__BookId__73BA3083");

                    b.HasOne("eBooks.Database.Models.User", "ReportedBy")
                        .WithMany("ReviewReportedBies")
                        .HasForeignKey("ReportedById")
                        .HasConstraintName("FK__Reviews__Reporte__74AE54BC");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("ReviewUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__UserId__72C60C4A");

                    b.Navigation("Book");

                    b.Navigation("ReportedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.User", b =>
                {
                    b.HasOne("eBooks.Database.Models.User", "PublisherVerifiedBy")
                        .WithMany("InversePublisherVerifiedBy")
                        .HasForeignKey("PublisherVerifiedById")
                        .HasConstraintName("FK__Users__Publisher__3E52440B");

                    b.HasOne("eBooks.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__3D5E1FD2");

                    b.Navigation("PublisherVerifiedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eBooks.Database.Models.Wishlist", b =>
                {
                    b.HasOne("eBooks.Database.Models.Book", "Book")
                        .WithMany("Wishlists")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Wishlists__BookI__628FA481");

                    b.HasOne("eBooks.Database.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Wishlists__UserI__619B8048");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eBooks.Database.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("eBooks.Database.Models.Book", b =>
                {
                    b.Navigation("AccessRights");

                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("Notifications");

                    b.Navigation("Purchases");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("eBooks.Database.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("eBooks.Database.Models.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("eBooks.Database.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("eBooks.Database.Models.User", b =>
                {
                    b.Navigation("AccessRights");

                    b.Navigation("Authors");

                    b.Navigation("BookPublishers");

                    b.Navigation("BookReviewedBies");

                    b.Navigation("Genres");

                    b.Navigation("InversePublisherVerifiedBy");

                    b.Navigation("Languages");

                    b.Navigation("NotificationPublishers");

                    b.Navigation("NotificationUsers");

                    b.Navigation("PublisherFollowPublishers");

                    b.Navigation("PublisherFollowUsers");

                    b.Navigation("PurchasePublishers");

                    b.Navigation("PurchaseUsers");

                    b.Navigation("QuestionAnsweredBies");

                    b.Navigation("QuestionUsers");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reports");

                    b.Navigation("ReviewReportedBies");

                    b.Navigation("ReviewUsers");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
